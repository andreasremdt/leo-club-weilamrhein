<form data-form class="grid grid-cols-2 gap-4">
  <div>
    <label class="label" for="name">Vor- und Nachname</label>
    <input
      data-validate
      class="input"
      type="text"
      id="name"
      name="name"
      required
      data-error="Bitte gebe deinen Vor- und Nachnamen an"
    />
  </div>

  <div class="col-start-1 col-end-2">
    <label class="label" for="email">E-Mail-Adresse</label>
    <input
      data-validate
      class="input"
      type="email"
      id="email"
      name="email"
      required
      data-error="Bitte gebe eine gültige E-Mail-Addresse an"
    />
  </div>

  <div class="col-start-1 col-end-2">
    <label class="label" for="phone">Telefonnummer (optional)</label>
    <input class="input" type="text" id="phone" name="phone" />
  </div>

  <div class="col-start-2 row-start-1 row-end-4 flex flex-col">
    <input
      type="text"
      name="honeypot"
      id="honeypot"
      autocomplete="off"
      aria-hidden="true"
      tabindex="-1"
      hidden
    />
    <label class="label" for="message">Deine Nachricht</label>
    <textarea
      data-validate
      class="input flex-1"
      id="message"
      name="message"
      required
      data-error="Bitte schreibe mindestens 10 Buchstaben"
      minlength="10"></textarea>
  </div>

  <button
    class="btn btn-primary col-start-1 col-end-3 justify-center"
    type="submit"
    aria-live="assertive"
    data-submit>Nachricht senden</button
  >

  <script>
    const form = document.querySelector("[data-form]") as HTMLFormElement;
    const inputs = document.querySelectorAll(
      "[data-validate]",
    ) as NodeListOf<HTMLInputElement>;
    const button = document.querySelector("[data-submit]") as HTMLButtonElement;

    function validate(input: HTMLInputElement) {
      if (!input.checkValidity() && !input.hasAttribute("aria-invalid")) {
        const error = document.createElement("p");

        error.className = "text-red-500 m-0";
        error.id = `${input.name}-error`;
        error.setAttribute("aria-live", "assertive");
        error.textContent = input.getAttribute("data-error");

        input.setAttribute("aria-invalid", "true");
        input.setAttribute("aria-describedby", `${input.name}-error`);
        input.insertAdjacentElement("afterend", error);
      } else if (input.checkValidity() && input.hasAttribute("aria-invalid")) {
        input.nextElementSibling?.remove();
        input.removeAttribute("aria-invalid");
        input.removeAttribute("aria-describedby");
      }
    }

    function sendEmail(data: FormData) {
      button.textContent = "Nachricht wird gesendet...";
      button.disabled = true;

      fetch("/.netlify/functions/send-email", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(Object.fromEntries(data)),
      })
        .then((response) => response.json())
        .then(() => {
          button.textContent = "Deine Nachricht wurde erfolgreich zugestellt!";
        })
        .catch(() => {
          button.textContent =
            "Fehler beim Zustellen der Nachricht. Versuche es später erneut.";
          button.disabled = false;
        });
    }

    function handleSubmit(event: SubmitEvent) {
      event.preventDefault();

      for (const input of inputs) {
        validate(input);
      }

      const firstInvalidInput = document.querySelector(
        '[aria-invalid="true"]',
      ) as HTMLInputElement;

      if (firstInvalidInput) {
        firstInvalidInput.focus();
      } else {
        sendEmail(new FormData(event.target as HTMLFormElement));
      }
    }

    function handleBlur(event: FocusEvent) {
      const input = event.target as HTMLInputElement;

      validate(input);
    }

    function handleInput(event: Event) {
      const input = event.target as HTMLInputElement;

      if (input.hasAttribute("aria-invalid")) {
        validate(input);
      }
    }

    form.setAttribute("novalidate", "true");
    form.addEventListener("submit", handleSubmit);

    for (const input of inputs) {
      input.addEventListener("blur", handleBlur);
      input.addEventListener("input", handleInput);
    }
  </script>
</form>
