<div data-search-box class="wrapper"></div>
<div data-search-hits hidden>
  <div data-search-stats></div>
</div>

<style>
  @media (max-width: 31.25rem) {
    .wrapper {
      flex: 1;
    }
  }

  @media (min-width: 31.25rem) {
    :global(.ais-SearchBox-form) {
      width: 18.75rem;
    }
  }

  :global(.ais-SearchBox-form) {
    display: flex;
    align-items: center;
    position: relative;
    justify-content: flex-end;
    height: 2.625rem;
  }

  :global(.ais-SearchBox-input) {
    border: unset;
    padding-inline: 1rem;
    position: absolute;
    inset: 0;
    height: 100%;
  }

  :global(.ais-SearchBox-submit, .ais-SearchBox-reset) {
    position: relative;
    width: 2rem;
    border: unset;
    background-color: transparent;
    cursor: pointer;
    height: 100%;
    color: hsl(var(--clr-gray-500));
    transition: color 0.1s linear;
  }

  :global(
      .ais-SearchBox-submit:where(:hover, :focus-visible),
      .ais-SearchBox-reset:where(:hover, :focus-visible)
    ) {
    color: hsl(var(--clr-primary));
  }

  :global(.ais-Hits) {
    position: absolute;
    top: calc(100% + 1px);
    left: 50%;
    right: 0;
    background-color: hsl(var(--clr-white));
    z-index: 2;
    box-shadow: 0 2px 4px hsl(var(--clr-gray-500) / 0.1);
    border-radius: 2px;
    padding: 3.5rem 1.5rem 1.5rem;
    max-height: 50vh;
    overflow-y: auto;
    z-index: 3;
  }

  @media (max-width: 56.25rem) {
    :global(.ais-Hits) {
      left: 0;
      max-height: calc(100vh - 100%);
    }
  }

  :global(.ais-Hits-list) {
    list-style: none;
    padding-left: unset;
    margin-block: unset;
  }

  :global(.ais-Hits-item:not(:last-child)) {
    margin-bottom: 1rem;
  }

  :global(.ais-Hits-item:where(:hover, :focus-visible) .ais-Hits-title) {
    color: hsl(var(--clr-primary));
  }

  :global(.ais-Hits-title) {
    font-size: 17px;
    line-height: 1.2;
    transition: color 0.1s linear;
  }

  :global(.ais-Hits-date) {
    font-size: 14px;
  }

  :global(.ais-Highlight-highlighted) {
    background-color: hsl(var(--clr-primary) / 0.5);
  }

  :global(.ais-Hits-empty) {
    font-weight: bold;
    text-align: color;
  }

  :global(.ais-Stats-text) {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    background-color: hsl(var(--clr-gray-100));
    display: block;
    padding: 0.5rem 1.5rem;
    border-bottom: 1px solid hsl(var(--clr-gray-200));
    font-family: var(--ff-sans);
    font-weight: 600;
    text-transform: uppercase;
  }
</style>

<script>
  import algoliasearch from "algoliasearch/lite";
  import instantsearch from "instantsearch.js";
  import { searchBox, hits, stats } from "instantsearch.js/es/widgets";

  import { formatDate } from "@/lib/utils";

  let searchClient = algoliasearch(
    import.meta.env.PUBLIC_ALGOLIA_APPLICATION_ID,
    import.meta.env.PUBLIC_ALGOLIA_API_KEY,
  );

  let search = instantsearch({
    indexName: "posts",
    searchClient,
  });

  let searchBoxElement = document.querySelector(
    "[data-search-box]",
  ) as HTMLElement;
  let hitsElement = document.querySelector("[data-search-hits]") as HTMLElement;
  let statsElement = document.querySelector(
    "[data-search-stats]",
  ) as HTMLElement;

  function handleKeyDown(event: KeyboardEvent) {
    if (event.key === "Escape" && !hitsElement.hidden) {
      hitsElement.hidden = true;
    }
  }

  function handleClick(event: MouseEvent) {
    if (
      !hitsElement.hidden &&
      !(event.target as HTMLElement).closest("[data-search-hits]")
    ) {
      hitsElement.hidden = true;
    }
  }

  document.addEventListener("keydown", handleKeyDown);
  document.addEventListener("click", handleClick);

  search.addWidgets([
    searchBox({
      container: searchBoxElement,
      placeholder: "Seite durchsuchen...",
      queryHook(query, search) {
        if (query.length > 0) {
          search(query);
          hitsElement.hidden = false;
        } else {
          hitsElement.hidden = true;
        }
      },
      templates: {
        submit(_, { html }) {
          return html`
            <svg viewBox="0 0 24 24" width="20" height="20">
              <path
                fill="currentColor"
                d="M16.041 15.856c-0.034 0.026-0.067 0.055-0.099 0.087s-0.060 0.064-0.087 0.099c-1.258 1.213-2.969 1.958-4.855 1.958-1.933 0-3.682-0.782-4.95-2.050s-2.050-3.017-2.050-4.95 0.782-3.682 2.050-4.95 3.017-2.050 4.95-2.050 3.682 0.782 4.95 2.050 2.050 3.017 2.050 4.95c0 1.886-0.745 3.597-1.959 4.856zM21.707 20.293l-3.675-3.675c1.231-1.54 1.968-3.493 1.968-5.618 0-2.485-1.008-4.736-2.636-6.364s-3.879-2.636-6.364-2.636-4.736 1.008-6.364 2.636-2.636 3.879-2.636 6.364 1.008 4.736 2.636 6.364 3.879 2.636 6.364 2.636c2.125 0 4.078-0.737 5.618-1.968l3.675 3.675c0.391 0.391 1.024 0.391 1.414 0s0.391-1.024 0-1.414z"
              ></path>
            </svg>
          `;
        },
        reset(_, { html }) {
          return html`
            <svg viewBox="0 0 24 24" width="24" height="24">
              <path
                fill="currentColor"
                d="M5.293 6.707l5.293 5.293-5.293 5.293c-0.391 0.391-0.391 1.024 0 1.414s1.024 0.391 1.414 0l5.293-5.293 5.293 5.293c0.391 0.391 1.024 0.391 1.414 0s0.391-1.024 0-1.414l-5.293-5.293 5.293-5.293c0.391-0.391 0.391-1.024 0-1.414s-1.024-0.391-1.414 0l-5.293 5.293-5.293-5.293c-0.391-0.391-1.024-0.391-1.414 0s-0.391 1.024 0 1.414z"
              ></path>
            </svg>
          `;
        },
      },
    }),
    stats({
      container: statsElement,
      templates: {
        text(data, { html }) {
          return html`<p>${data.nbHits} Ergebnisse gefunden</p>`;
        },
      },
    }),
    hits({
      container: hitsElement,
      templates: {
        item(hit, { html, components }) {
          return html`
            <a href="${hit.slug}" class="ais-Hits-link">
              <h2 class="ais-Hits-title">
                ${components.Highlight({ attribute: "title", hit })}
              </h2>
              <time datetime="${hit.date}" class="ais-Hits-date"
                >${formatDate(hit.date)}</time
              >
            </a>
          `;
        },
        empty(results, { html }) {
          return html`<p class="ais-Hits-empty">
            Keine Ergebnisse f√ºr "${results.query}" gefunden.
          </p>`;
        },
      },
    }),
  ]);

  search.start();
</script>
