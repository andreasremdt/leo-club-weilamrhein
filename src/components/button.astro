---
interface ButtonBaseProps {
  variant?: "primary" | "secondary";
}
type NativeType = "submit" | "reset" | "button" | null | undefined;
type HTMLButtonProps = astroHTML.JSX.ButtonHTMLAttributes;
type HTMLAnchorProps = astroHTML.JSX.AnchorHTMLAttributes;
export type Props = ButtonBaseProps & (HTMLAnchorProps | HTMLButtonProps);

const { variant = "secondary", class: className, type, href, ...props } = Astro.props;
---

{
  Boolean(href) ? (
    <a href={href} class:list={["button", variant, className]} {...props}>
      <slot />
    </a>
  ) : (
    <button type={type as NativeType} class:list={["button", variant, className]} {...props}>
      <slot />
    </button>
  )
}

<style>
  .button {
    display: inline-flex;
    border: 1px solid;
    padding: unset;
    cursor: pointer;
    transition: color 0.1s linear, background-color 0.1s linear, border-color 0.1s linear;
    border-radius: 2px;
    font-size: 14px;
    font-family: var(--ff-sans);
    font-weight: 600;
    text-transform: uppercase;
    appearance: none;
    justify-content: center;
    outline: none;
  }

  .primary {
    background-color: hsl(var(--clr-gray-500));
    border-color: hsl(var(--clr-gray-500));
    color: hsl(var(--clr-white));
    padding: 0.75rem;
  }

  .primary:where(:hover, :focus-visible):not([disabled]) {
    color: hsl(var(--clr-gray-500));
    background-color: hsl(var(--clr-primary));
    border-color: hsl(var(--clr-primary));
  }

  .primary:focus-visible {
    box-shadow: 0 0 0 3px hsl(var(--clr-primary) / 0.3);
  }

  .secondary {
    background-color: transparent;
    color: hsl(var(--clr-primary));
    padding: 0.4rem 0.75rem;
    border-color: hsl(var(--clr-primary));
  }

  .secondary:where(:hover, :focus-visible) {
    color: hsl(var(--clr-gray-500));
    border-color: hsl(var(--clr-gray-500));
  }

  .secondary:focus-visible {
    box-shadow: 0 0 0 3px hsl(var(--clr-gray-500) / 0.3);
  }

  .button:is(.primary)[disabled] {
    cursor: not-allowed;
    background-color: hsl(var(--clr-gray-300));
  }
</style>
