---
interface ButtonBaseProps {
  variant?: "primary" | "secondary";
}
type HTMLButtonProps = astroHTML.JSX.ButtonHTMLAttributes;
type HTMLAnchorProps = astroHTML.JSX.AnchorHTMLAttributes;
export type Props = ButtonBaseProps & (HTMLAnchorProps | HTMLButtonProps);

const { variant = "secondary", class: className, type, href, ...props } = Astro.props;
---

{
  Boolean(href) ? (
    <a href={href} class:list={["button", variant, className]} {...props}>
      <slot />
    </a>
  ) : (
    <button type={type} class:list={["button", variant, className]} {...props}>
      <slot />
    </button>
  )
}

<style>
  .button {
    display: inline-flex;
    border: unset;
    padding: unset;
    cursor: pointer;
    transition: color 0.1s linear, background-color 0.1s linear;
  }

  .button:is(.primary) {
    background-color: var(--clr-gray-500);
    color: white;
    border-radius: 2px;
    font-size: 14px;
    justify-content: center;
    padding: 0.75rem;
  }

  .button:is(.primary):where(:hover, :focus-visible):not([disabled]) {
    color: var(--clr-gray-500);
    background-color: var(--clr-primary);
  }

  .button:is(.secondary) {
    color: var(--clr-primary);
    text-transform: uppercase;
    font-weight: bold;
  }

  .button:is(.secondary):where(:hover, :focus-visible) {
    color: var(--clr-gray-500);
  }

  .button:is(.primary)[disabled] {
    cursor: not-allowed;
    background-color: var(--clr-gray-300);
  }
</style>
